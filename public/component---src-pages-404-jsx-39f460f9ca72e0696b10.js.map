{"version":3,"sources":["webpack:///./src/pages/404.jsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/layout.jsx","webpack:///./.cache/public-page-renderer-prod.js"],"names":["NotFoundPage","m","module","exports","require","default","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","data","query","render","finalData","Fragment","StaticQuery","props","children","Consumer","Layout","content","location","pathname","id","className","title","site","siteMetadata","meta","name","lang","ProdPageRenderer","pageResources","createElement","InternalPageRenderer","json"],"mappings":"0FAAA,oCAUeA,UAPM,kBACnB,kBAAC,IAAD,KACE,yCACA,yF,oBCNJ,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,G,iCCA/C,mHAcyBK,QAAOC,QAdhC,IAgBMC,EAAqBC,IAAMC,cAAc,IAE/C,SAASC,EAAT,GAA4E,IAAzCC,EAAwC,EAAxCA,gBAAiBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OACzDC,EAAYH,EACdA,EAAKA,KACLD,EAAgBE,IAAUF,EAAgBE,GAAOD,KAErD,OACE,kBAAC,IAAMI,SAAP,KACGD,GAAaD,EAAOC,IACnBA,GAAa,uDAKrB,IAAME,EAAc,SAAAC,GAAU,IACpBN,EAAkCM,EAAlCN,KAAMC,EAA4BK,EAA5BL,MAAOC,EAAqBI,EAArBJ,OAAQK,EAAaD,EAAbC,SAE7B,OACE,kBAACZ,EAAmBa,SAApB,KACG,SAAAT,GAAe,OACd,kBAACD,EAAD,CACEE,KAAMA,EACNC,MAAOA,EACPC,OAAQA,GAAUK,EAClBR,gBAAiBA,Q,gGCmBZU,IArDA,SAAC,GAA4B,IAEtCC,EAFYH,EAAyB,EAAzBA,SAAUI,EAAe,EAAfA,SAoB1B,OAfED,EADEC,GAAkC,MAAtBA,EAASC,SAErB,6BACGL,GAKH,yBAAKM,GAAG,UAAUC,UAAU,QAC1B,6BACGP,IAOP,kBAAC,IAAD,CACEN,MAAK,aASLC,OAAQ,SAAAF,GAAI,OACV,oCACE,kBAAC,IAAD,CACEe,MAAOf,EAAKgB,KAAKC,aAAaF,MAC9BG,KAAM,CACJ,CAAEC,KAAM,cAAeT,QAAS,UAChC,CAAES,KAAM,WAAYT,QAAS,uBAG/B,0BAAMU,KAAK,QAEZV,IArBP,W,gLCNWW,UAjBU,SAAC,GAAiC,IAA/BV,EAA8B,EAA9BA,SAAUW,EAAoB,EAApBA,cACpC,OAAKA,EAGE1B,IAAM2B,cAAcC,IAApB,eACLb,WACAW,iBACGA,EAAcG,OALV","file":"component---src-pages-404-jsx-39f460f9ca72e0696b10.js","sourcesContent":["import React from 'react'\r\nimport Layout from '../components/layout'\r\n\r\nconst NotFoundPage = () => (\r\n  <Layout>\r\n    <h1>NOT FOUND</h1>\r\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\r\n  </Layout>\r\n)\r\n\r\nexport default NotFoundPage\r\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport '../assets/scss/main.scss'\r\n\r\nconst Layout = ({ children, location }) => {\r\n\r\n  let content;\r\n\r\n  if (location && location.pathname === '/') {\r\n    content = (\r\n      <div>\r\n        {children}\r\n      </div>\r\n    )\r\n  } else {\r\n    content = (\r\n      <div id=\"wrapper\" className=\"page\">\r\n        <div>\r\n          {children}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StaticQuery\r\n      query={graphql`\r\n        query SiteTitleQuery {\r\n          site {\r\n            siteMetadata {\r\n              title\r\n            }\r\n          }\r\n        }\r\n      `}\r\n      render={data => (\r\n        <>\r\n          <Helmet\r\n            title={data.site.siteMetadata.title}\r\n            meta={[\r\n              { name: 'description', content: 'Sample' },\r\n              { name: 'keywords', content: 'sample, something' },\r\n            ]}\r\n          >\r\n            <html lang=\"en\" />\r\n          </Helmet>\r\n          {content}\r\n        </>\r\n      )}\r\n    />\r\n  )\r\n}\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Layout\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}